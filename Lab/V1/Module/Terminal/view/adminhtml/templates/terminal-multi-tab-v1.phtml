<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm/css/xterm.css" />
<script src="https://cdn.jsdelivr.net/npm/xterm/lib/xterm.js"></script>
<style>
    #tab-bar {
        display: flex;
        gap: 5px;
        margin-bottom: 10px;
    }

    .tab-button {
        padding: 5px 10px;
        background-color: #2c2c2c;
        color: white;
        border: none;
        cursor: pointer;
    }

    .tab-button.active {
        background-color: #007bff;
    }

    #terminal-container > div {
        display: none;
        height: 500px;
        width: 100%;
    }

    #terminal-container > div.active {
        display: block;
    }
</style>

<div id="tab-bar">
    <button onclick="addTerminalTab()">+ New Tab</button>
</div>

<div id="terminal-container"></div>

<script>
    const terminals = [];
    const sockets = [];
    let activeTabIndex = -1;

    function addTerminalTab() {
        const container = document.getElementById('terminal-container');
        const tabIndex = terminals.length;

        // Create new terminal div
        const terminalDiv = document.createElement('div');
        terminalDiv.id = 'terminal-' + tabIndex;
        terminalDiv.className = 'terminal-instance';
        container.appendChild(terminalDiv);

        // Create XTerm instance
        const term = new Terminal();
        term.open(terminalDiv);

        // Create WebSocket
        const socket = new WebSocket('wss://your-terminal-socket-endpoint');
        socket.onmessage = e => term.write(e.data);
        term.onData(data => socket.send(data));

        terminals.push(term);
        sockets.push(socket);

        // Add new tab button
        const tabButton = document.createElement('button');
        tabButton.textContent = `Tab ${tabIndex + 1}`;
        tabButton.className = 'tab-button';
        tabButton.onclick = () => switchToTab(tabIndex);
        document.getElementById('tab-bar').appendChild(tabButton);

        // Switch to the new tab
        switchToTab(tabIndex);
    }

    function switchToTab(index) {
        if (index === activeTabIndex) return;

        // Update terminal views
        document.querySelectorAll('.terminal-instance').forEach((el, i) => {
            el.classList.toggle('active', i === index);
        });

        // Update tab buttons
        document.querySelectorAll('.tab-button').forEach((btn, i) => {
            btn.classList.toggle('active', i === index + 1); // +1 because of "New Tab" button
        });

        activeTabIndex = index;
    }

    // Auto-create the first tab
    addTerminalTab();
</script>
