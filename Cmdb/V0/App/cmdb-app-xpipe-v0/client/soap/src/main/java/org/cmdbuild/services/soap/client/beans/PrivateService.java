package org.cmdbuild.services.soap.client.beans;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.10
 * 2018-05-16T09:39:11.476+02:00
 * Generated source version: 3.1.10
 * 
 */
@WebServiceClient(name = "PrivateService", 
                  wsdlLocation = "file:/home/davide/svn/cmdbuild_30/client/soap-gen/target/generated/wsdl/Private.wsdl",
                  targetNamespace = "http://soap.services.cmdbuild.org") 
public class PrivateService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://soap.services.cmdbuild.org", "PrivateService");
    public final static QName PrivatePort = new QName("http://soap.services.cmdbuild.org", "PrivatePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/davide/svn/cmdbuild_30/client/soap-gen/target/generated/wsdl/Private.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(PrivateService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/home/davide/svn/cmdbuild_30/client/soap-gen/target/generated/wsdl/Private.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public PrivateService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public PrivateService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PrivateService() {
        super(WSDL_LOCATION, SERVICE);
    }
    




    /**
     *
     * @return
     *     returns Private
     */
    @WebEndpoint(name = "PrivatePort")
    public Private getPrivatePort() {
        return super.getPort(PrivatePort, Private.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Private
     */
    @WebEndpoint(name = "PrivatePort")
    public Private getPrivatePort(WebServiceFeature... features) {
        return super.getPort(PrivatePort, Private.class, features);
    }

}
