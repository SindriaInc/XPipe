Ext.define('CMDBuildUI.view.widgets.manageemail.Panel', {
    extend: 'Ext.panel.Panel',

    requires: [
        'CMDBuildUI.view.widgets.manageemail.PanelController'
    ],

    statics: {
        /**
         * Function executed when the form opens
         *
         * @param {CMDBuildUI.model.classes.Card|CMDBuild.model.processes.Instance} target
         * @param {CMDBuildUI.model.WidgetDefinition} widget
         * @param {Object} config
         * @param {String} config.formmode
         *
         * @return {Ext.promise.Promise}
         */
        onTargetFormOpen: function (target, widget, config) {
            var deferred = new Ext.Deferred();

            // get templates
            var expression = /^Template(\d*?)$/;
            target._templatestoevaluate = [];
            for (var k in widget.getData()) {
                var matched = expression.exec(k);
                if (matched) {
                    target._templatestoevaluate.push({
                        name: widget.get('Template' + matched[1]),
                        condition: widget.get('Condition' + matched[1]),
                        notifywith: widget.get('NotifyWith' + matched[1])
                    });
                }
            }

            // resolve promise
            deferred.resolve();
            return deferred;
        },

        /**
         * Function executed before save/execute action
         *
         * @param {CMDBuildUI.model.classes.Card|CMDBuild.model.processes.Instance} target
         * @param {CMDBuildUI.model.WidgetDefinition} widget
         * @param {Object} config
         * @param {String} config.formmode
         * @param {String} config.action One of `save` and `execute`. Default save.
         *
         * @return {Ext.promise.Promise}
         */
        beforeTargetSave: function (target, widget, config) {
            var deferred = new Ext.Deferred();

            target.loadTemplates().then(function (templates) {
                var templateIds = [];

                templates.forEach(function(t) {
                    templateIds.push(t.get('_id'));
                });

                function saveOtherEmails(email) {
                    var def = new Ext.Deferred();
                    email.save({
                        params: {
                            upload_template_attachments: true
                        },
                        callback: function () {
                            def.resolve();
                        }
                    });
                    return def;
                }

                target.updateObjEmailsFromTemplates(true).then(function (success) {
                    // check for emails generated by the user
                    // var tplpromeses = [];
                    // target.emails().query('status', CMDBuildUI.model.emails.Email.statuses.draft).getRange().forEach(function(email) {
                    //     if (!Ext.Array.contains(templateIds, email.get('template'))) {
                    //         tplpromeses.push(saveOtherEmails(email));
                    //     }
                    // });
                    // if (tplpromeses.length) {
                    //     Ext.Promise.all(tplpromeses).then(function() {
                    //         deferred.resolve(success);
                    //     });
                    // } else {
                        deferred.resolve(success);
                    // }
                });
            });
            return deferred;
        },

        /**
         * Function executed after save/execute action
         *
         * @param {CMDBuildUI.model.classes.Card|CMDBuild.model.processes.Instance} target
         * @param {CMDBuildUI.model.WidgetDefinition} widget
         * @param {Object} config
         * @param {String} config.formmode
         * @param {String} config.action One of `save` and `execute`
         *
         * @return {Ext.promise.Promise}
         */
        afterTargetSave: function (target, widget, config) {
            var deferred = new Ext.Deferred();

            // get emails
            var store = target.emails();

            // check for new emails
            if (!Ext.isEmpty(store.getNewRecords())) {
                CMDBuildUI.util.helper.FormHelper.startSavingForm();
                // get the url
                var url = target.getEmailsProxyUrl();

                /**
                 * Save the email
                 * @param {CMDBuildUI.model.emails.Email} email
                 *
                 * @return {Ext.promise.Promise}
                 */
                function saveEmail(email) {
                    var emailDef = new Ext.Deferred();

                    // get attachments
                    var attachments = email._attachments;
                    // set the url
                    email.getProxy().setUrl(url);
                    // set the status
                    var status = target.get("_advance") ? CMDBuildUI.model.emails.Email.statuses.outgoing : CMDBuildUI.model.emails.Email.statuses.draft;
                    email.set("status", status);
                    // save the email
                    email.save({
                        params: {
                            upload_template_attachments: true
                        },
                        callback: function () {
                            email.saveAttachments(attachments).then(function () {
                                emailDef.resolve();
                            });
                        }
                    })
                    return emailDef;
                }

                // save all emails
                var promeses = [];
                store.getNewRecords().forEach(function (email) {
                    promeses.push(saveEmail(email));
                });

                // resolve promise when all emails are saved
                Ext.Promise.all(promeses).then(function () {
                    CMDBuildUI.util.helper.FormHelper.endSavingForm();
                    deferred.resolve();
                });
            } else {
                deferred.resolve();
            }

            return deferred;
        }
    },

    mixins: [
        'CMDBuildUI.view.widgets.Mixin'
    ],

    alias: 'widget.widgets-manageemail-panel',
    controller: 'widgets-manageemail-panel',

    layout: 'fit',

    buttons: [{
        ui: 'secondary-action-small',
        itemId: 'closebtn',
        text: CMDBuildUI.locales.Locales.common.actions.close,
        localized: {
            text: 'CMDBuildUI.locales.Locales.common.actions.close'
        },
        autoEl: {
            'data-testid': 'widgets-manageemail-close'
        }
    }]
});