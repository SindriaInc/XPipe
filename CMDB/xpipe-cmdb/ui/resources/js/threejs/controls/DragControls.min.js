THREE.DragControls=function(l,g,h){if(l instanceof THREE.Camera){console.warn("THREE.DragControls: Constructor now expects ( objects, camera, domElement )");var t=l;l=g;g=t}var q=new THREE.Plane();var a=new THREE.Raycaster();var d=new THREE.Vector2();var o=new THREE.Vector3();var r=new THREE.Vector3();var s=null,b=null;var c=this;function f(){h.addEventListener("mousemove",p,false);h.addEventListener("mousedown",m,false);h.addEventListener("mouseup",n,false);h.addEventListener("mouseleave",n,false);h.addEventListener("touchmove",k,false);h.addEventListener("touchstart",j,false);h.addEventListener("touchend",i,false)}function e(){h.removeEventListener("mousemove",p,false);h.removeEventListener("mousedown",m,false);h.removeEventListener("mouseup",n,false);h.removeEventListener("mouseleave",n,false);h.removeEventListener("touchmove",k,false);h.removeEventListener("touchstart",j,false);h.removeEventListener("touchend",i,false)}function u(){e()}function p(y){y.preventDefault();var x=h.getBoundingClientRect();d.x=((y.clientX-x.left)/x.width)*2-1;d.y=-((y.clientY-x.top)/x.height)*2+1;a.setFromCamera(d,g);if(s&&c.enabled){if(a.ray.intersectPlane(q,r)){s.position.copy(r.sub(o))}c.dispatchEvent({type:"drag",object:s});return}a.setFromCamera(d,g);var w=a.intersectObjects(l);if(w.length>0){var v=w[0].object;q.setFromNormalAndCoplanarPoint(g.getWorldDirection(q.normal),v.position);if(b!==v){c.dispatchEvent({type:"hoveron",object:v});h.style.cursor="pointer";b=v}}else{if(b!==null){c.dispatchEvent({type:"hoveroff",object:b});h.style.cursor="auto";b=null}}}function m(w){w.preventDefault();a.setFromCamera(d,g);var v=a.intersectObjects(l);if(v.length>0){s=v[0].object;if(a.ray.intersectPlane(q,r)){o.copy(r).sub(s.position)}h.style.cursor="move";c.dispatchEvent({type:"dragstart",object:s})}}function n(v){v.preventDefault();if(s){c.dispatchEvent({type:"dragend",object:s});s=null}h.style.cursor=b?"pointer":"auto"}function k(w){w.preventDefault();w=w.changedTouches[0];var v=h.getBoundingClientRect();d.x=((w.clientX-v.left)/v.width)*2-1;d.y=-((w.clientY-v.top)/v.height)*2+1;a.setFromCamera(d,g);if(s&&c.enabled){if(a.ray.intersectPlane(q,r)){s.position.copy(r.sub(o))}c.dispatchEvent({type:"drag",object:s});return}}function j(x){x.preventDefault();x=x.changedTouches[0];var w=h.getBoundingClientRect();d.x=((x.clientX-w.left)/w.width)*2-1;d.y=-((x.clientY-w.top)/w.height)*2+1;a.setFromCamera(d,g);var v=a.intersectObjects(l);if(v.length>0){s=v[0].object;q.setFromNormalAndCoplanarPoint(g.getWorldDirection(q.normal),s.position);if(a.ray.intersectPlane(q,r)){o.copy(r).sub(s.position)}h.style.cursor="move";c.dispatchEvent({type:"dragstart",object:s})}}function i(v){v.preventDefault();if(s){c.dispatchEvent({type:"dragend",object:s});s=null}h.style.cursor="auto"}f();this.enabled=true;this.activate=f;this.deactivate=e;this.dispose=u;this.setObjects=function(){console.error("THREE.DragControls: setObjects() has been removed.")};this.on=function(v,w){console.warn("THREE.DragControls: on() has been deprecated. Use addEventListener() instead.");c.addEventListener(v,w)};this.off=function(v,w){console.warn("THREE.DragControls: off() has been deprecated. Use removeEventListener() instead.");c.removeEventListener(v,w)};this.notify=function(v){console.error("THREE.DragControls: notify() has been deprecated. Use dispatchEvent() instead.");c.dispatchEvent({type:v})}};THREE.DragControls.prototype=Object.create(THREE.EventDispatcher.prototype);THREE.DragControls.prototype.constructor=THREE.DragControls;