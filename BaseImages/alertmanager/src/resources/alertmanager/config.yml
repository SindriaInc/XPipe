route:
  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: 10s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 30s

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 30m

  # A default receiver
  receiver: @@DEFAULT_RECEIVER@@

  # All the above attributes are inherited by all child routes and can
  # overwritten on each.
  routes:
    - receiver: "telegram"
      group_wait: 10s
      match_re:
        severity: critical|warning
      continue: true

    - receiver: "teams"
      group_wait: 10s
      match_re:
        severity: critical|warning
      continue: true

receivers:
  - name: 'telegram'
    telegram_configs:
      - bot_token: @@TELEGRAM_BOT_TOKEN@@
        api_url: https://api.telegram.org
        chat_id: @@TELEGRAM_CHAT_ID@@
        #parse_mode: ''
        message: '{{ template "telegram.xpipe.message" .}}'

  - name: 'teams'
    msteams_configs:
      - webhook_url: @@TEAMS_WEBHOOK_URL@@
        title: '{{ template "teams.xpipe.title" .}}'
        text: '{{ template "teams.xpipe.text" .}}'

  #- name: "slack"
  #  slack_configs:
  #    - api_url: 'https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/xxxxxxxxxxxxxxxxxxxxxxxxxxx'
  #      send_resolved: true
  #      channel: 'monitoring'
  #      text: "{{ range .Alerts }}<!channel> {{ .Annotations.summary }}\n{{ .Annotations.description }}\n{{ end }}"

  #- name: "pager"
  #  webhook_configs:
  #    - url: http://a.b.c.d:8080/send/sms
  #      send_resolved: true

templates:
- '/etc/alertmanager/sindria.tmpl'