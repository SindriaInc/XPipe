stages:
  - build
  - push
  - test
  - clean
  - deploy

.set_colors: &set_colors
  - export BLUE='\033[0;34m'
  - export YELLOW='\033[0;33m'
  - export RED='\033[0;31m'
  - export NC='\033[0m' #No Color
  - export NOW=$(date "+%Y-%m-%d_%H-%M-%S")

.setup_storage: &setup_storage
  - ssh $SERVER "mkdir -p $BASE_PATH/$IMAGE_NAME"
  - ssh $SERVER "mkdir -p $BASE_PATH/$IMAGE_NAME/storage"
  - ssh $SERVER "mkdir -p $BASE_PATH/$IMAGE_NAME/storage/data"
  - ssh $SERVER "mkdir -p $BASE_PATH/$IMAGE_NAME/storage/logs"

variables:
    EMAIL: "notifications@sindria.org"
    DOMAIN: "example.com"
    CERT_FILE: "/etc/letsencrypt/live/$DOMAIN/fullchain.pem"
    KEY_FILE: "/etc/letsencrypt/live/$DOMAIN/privkey.pem"
    BASE_PATH: "/home/sindria"
    IMAGE_NAMESPACE: "registry.sindria.org/example-team"
    IMAGE_NAME: "example-ingress"
    SERVER: "example.sindria.org"

build:certs:
  image: registry.sindria.org/devops/base-images/image-builder:latest
  stage: .pre
  tags:
    - example
  only:
    - schedules
    - branches
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - certs/
  script:
    - docker run --rm -t -v /home/sindria/$DOMAIN/.letsencrypt:/etc/letsencrypt -v /home/sindria/$DOMAIN/.well-known:/home/sindria/$DOMAIN/.well-known certbot/certbot certonly -n --agree-tos --webroot -w /home/sindria/$DOMAIN -d $DOMAIN -d www.$DOMAIN -m $EMAIL
    - mkdir -p certs
    - mkdir -p certs/$DOMAIN
    - cp $CERT_FILE ./certs/$DOMAIN
    - cp $KEY_FILE ./certs/$DOMAIN
  artifacts:
    paths:
      - certs/
    expire_in: 30 days

build:image:
  image: registry.sindria.org/devops/base-images/image-builder:latest
  stage: build
  tags:
    - docker
  only:
    - schedules
    - branches
  before_script:
    - *set_colors
    - rsync -ra $CI_PROJECT_DIR/certs/ $CI_PROJECT_DIR/src/resources/nginx/certs/
  script:
    - echo -e "${BLUE}Building image...${NC}"
    - bash build.sh $IMAGE_NAMESPACE/$IMAGE_NAME production
    - bash build.sh $IMAGE_NAMESPACE/$IMAGE_NAME local
    - cowsay -f tux "Build Success"

push:image:
  image: registry.sindria.org/devops/base-images/image-builder:latest
  stage: push
  tags:
    - docker
  only:
    - schedules
    - branches
  before_script:
    - *set_colors
  script:
    - echo -e "${BLUE}Pushing image into registry...${NC}"
    - docker push $IMAGE_NAMESPACE/$IMAGE_NAME:production
    - docker push $IMAGE_NAMESPACE/$IMAGE_NAME:local
    - echo #
    - echo -e "${BLUE}Cleaning local registry...${NC}"
    - docker image rm $IMAGE_NAMESPACE/$IMAGE_NAME:production
    - docker image rm $IMAGE_NAMESPACE/$IMAGE_NAME:local
    - echo #
    - cowsay -f dragon "Well Done! New docker image is now on your registry."

test:ingress:production:
  image: $IMAGE_NAMESPACE/$IMAGE_NAME:production
  stage: test
  only:
    - schedules
    - branches
  tags:
    - default
  before_script:
    - cat /etc/hosts.production >> /etc/hosts
  script:
    - nginx -t

test:ingress:local:
  image: $IMAGE_NAMESPACE/$IMAGE_NAME:local
  stage: test
  only:
    - schedules
    - branches
  tags:
    - default
  before_script:
    - cat /etc/hosts.local >> /etc/hosts
  script:
    - nginx -t

clean:ingress:production:
  image: registry.sindria.org/devops/base-images/image-builder:latest
  stage: clean
  only:
    - schedules
    - branches
  tags:
    - docker
  script:
    - docker image rm $IMAGE_NAMESPACE/$IMAGE_NAME:production

clean:ingress:local:
  image: registry.sindria.org/devops/base-images/image-builder:latest
  stage: clean
  only:
    - schedules
    - branches
  tags:
    - docker
  script:
    - docker image rm $IMAGE_NAMESPACE/$IMAGE_NAME:local

deploy:app:
  image: registry.sindria.org/devops/base-images/deployer:latest
  stage: deploy
  tags:
    - default
  only:
    - schedules
    - master
  before_script:
    - *set_colors
    - cp .env.production .env
    - cp docker-compose.production.yml docker-compose.yml
  script:
    - *setup_storage
    - ssh $SERVER "docker stop $IMAGE_NAME" || echo -e "${YELLOW}No such container $IMAGE_NAME${NC}"
    - ssh $SERVER "docker rm $IMAGE_NAME" || echo -e "${YELLOW}No such container $IMAGE_NAME${NC}"
    - rsync -ravP -e "ssh" --exclude='.git' --exclude='.git*' --exclude='.gitlab-ci.yml' --exclude='readme.md' --exclude='README.md' --exclude='build.sh' --exclude='storage' --exclude='src' --exclude='certs' --exclude='docker-compose.local.yml' --exclude='docker-compose.production.yml' --exclude='.env.local' --exclude='.env.production' --delete $CI_PROJECT_DIR/ $SERVER:/$BASE_PATH/$IMAGE_NAME/
    - ssh $SERVER "sudo chmod 770 $BASE_PATH/$IMAGE_NAME"
    - ssh $SERVER "docker image rm $IMAGE_NAMESPACE/$IMAGE_NAME:production" || echo -e "${YELLOW}Image not present into this local registry${NC}"
    - ssh $SERVER "cd $BASE_PATH/$IMAGE_NAME; docker-compose up -d"
    - cowsay "Deploy Success"