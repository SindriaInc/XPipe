#version: '3.9'

services:
  # =app
  app:
    image: "sindriainc/nginx-php:${NGINX_PHP_TAG}-${NGINX_PHP_VERSION}"
    container_name: "${APP_NAME}"
    #command: tail -f /dev/null
    command: /bin/bash -c "apk update; apk add nodejs npm; chmod +x /usr/local/bin/startup.sh; /usr/local/bin/startup.sh"
    volumes:
      - "${BASE_PATH}/${PROJECT_PATH}/${CODE_PATH}:${APP_CODE_PATH}"
      - "${BASE_PATH}/${CORE_MODULE_PATH}/:${APP_CODE_PATH}/${CORE_VENDOR_PATH}"
      - "${BASE_PATH}/${FND_MODULE_PATH}/:${APP_CODE_PATH}/${FND_VENDOR_PATH}"
    hostname: "${APP_NAME}.local"
    environment:
      # Core envs
      - CORE_PRODUCT_NAME=${CORE_PRODUCT_NAME}
      - CORE_PRODUCT_VERSION=${CORE_PRODUCT_VERSION}
      - CORE_STOREVIEW_ITALIAN_TOGGLE=${CORE_STOREVIEW_ITALIAN_TOGGLE}
      - CORE_GITHUB_ACCESS_TOKEN=${CORE_GITHUB_ACCESS_TOKEN}
      # Fnd Collector envs
      - FND_COLLECTOR_BASE_URL=${FND_COLLECTOR_BASE_URL}
      - FND_COLLECTOR_ADMIN_USERNAME=${FND_COLLECTOR_ADMIN_USERNAME}
      - FND_COLLECTOR_ADMIN_PASSWORD=${FND_COLLECTOR_ADMIN_PASSWORD}
      # Fnd Notifications envs
      - FND_NOTIFICATIONS_ACCESS_TOKEN=${FND_NOTIFICATIONS_ACCESS_TOKEN}
      # Fnd Gateway envs
      - FND_GATEWAY_ACCESS_TOKEN=${FND_GATEWAY_ACCESS_TOKEN}
    ports:
      - "8080:80"
    networks:
      default:
        ipv4_address: "${APP_IP_ADDRESS}"
        aliases:
          - "${APP_NAME}.local"
    #networks:
    #  vpc_app_name:
    #    ipv4_address: "${APP_IP_ADDRESS}"
    #    aliases:
    #      - "${APP_NAME}.local"

  # =db
  db:
    image: "mysql:${MYSQL_TAG}"
    container_name: "${APP_NAME}-db"
    command: [ "--default-authentication-plugin=mysql_native_password" ]
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      #- MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - "db:/var/lib/mysql"
    hostname: "${APP_NAME}-db.local"
    ports:
      - "33140:3306"
    networks:
      default:
        ipv4_address: "${DB_IP_ADDRESS}"
        aliases:
          - "${APP_NAME}-db.local"
    #networks:
    #  vpc_<app-name>:
    #    ipv4_address: "${DB_IP_ADDRESS}"
    #    aliases:
    #      - "${APP_NAME}.local"

  # =elasticsearch
  elasticsearch:
    image: "elasticsearch:${ELASTICSEARCH_TAG}"
    container_name: "${APP_NAME}-elasticsearch"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: secret
      cluster.name: "${APP_NAME}"
      #xpack.security.enabled: true
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    hostname: "${APP_NAME}-elasticsearch.local"
    #ports:
    #  - "9200:9200"
    #  - "9300:9300"
    networks:
      default:
        ipv4_address: "${ELASTICSEARCH_IP_ADDRESS}"
        aliases:
          - "${APP_NAME}-elasticsearch.local"


# =networks
networks:
  default:
    name: "vpc_xpipe"
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}

# =networks
#networks:
#  vpc_app_name:
#    external: true

# =volumes
volumes:
  db:
  elasticsearch:
