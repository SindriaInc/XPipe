image: sindriainc/pipeline:latest

pipelines:
  branches:
    master:
      - step:
          name: Build Certs
          script:
            #- docker run --rm -t --env IAC_MODE=${IAC_MODE} --env AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --env AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} --env OVH_CONF=${OVH_CONF} --env IAC_CERTBOT_CACHE=${IAC_CERTBOT_CACHE} --env IAC_CERTBOT_EMAIL=${IAC_CERTBOT_EMAIL} --env IAC_CERTBOT_DOMAIN=${IAC_CERTBOT_DOMAIN} sindriainc/build-certs-ovh:1.0.0
            - docker run --rm -t --env IAC_MODE=${IAC_MODE} --env AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --env AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} --env IAC_CERTBOT_CACHE=${IAC_CERTBOT_CACHE} --env IAC_CERTBOT_EMAIL=${IAC_CERTBOT_EMAIL} --env IAC_CERTBOT_DOMAIN=${IAC_CERTBOT_DOMAIN} sindriainc/build-certs-route53:1.0.0
            - cowsay -f pikachu "Build Success"
          services:
            - docker
      - step:
          name: Get Certs
          image:
            name: sindriainc/build-certs-route53:1.0.0
            entrypoint: [""]
          script:
            - mkdir -p tmp_letsencrypt
            - ls -la tmp_letsencrypt
            - aws s3 sync s3://${IAC_CERTBOT_CACHE} ./tmp_letsencrypt
            - ls -la tmp_letsencrypt
            - mkdir -p certs
            - mkdir -p certs/${IAC_CERTBOT_DOMAIN}
            - cp ./tmp_letsencrypt/live/${IAC_CERTBOT_DOMAIN}/fullchain.pem ./certs/${IAC_CERTBOT_DOMAIN}/fullchain.pem
            - cp ./tmp_letsencrypt/live/${IAC_CERTBOT_DOMAIN}/privkey.pem ./certs/${IAC_CERTBOT_DOMAIN}/privkey.pem
          services:
            - docker
          caches:
            - docker
          artifacts:
            - "certs/**"
      - step:
          name: Build and Push Image
          script:
            - rsync -ra ${BITBUCKET_CLONE_DIR}/certs/ ${BITBUCKET_CLONE_DIR}/src/resources/nginx/certs/
            - echo -e "${BLUE}Login into registry...${NC}"
            - echo ${DOCKERHUB_PASSWORD} | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            - echo -e "${BLUE}Building image...${NC}"
            - bash build.sh ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG} production
            - bash build.sh ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG} local
            - echo -e "${BLUE}Pushing image into registry...${NC}"
            - docker push ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:production
            - docker push ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:local
            - cowsay -f dragon "Well Done! New docker image is now on your registry."
          services:
            - docker
      - step:
          name: Test Ingress
          trigger: manual
          script:
            - echo -e "${BLUE}Login into registry...${NC}"
            - echo ${DOCKERHUB_PASSWORD} | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            - docker run --rm -t  ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:production /bin/bash -c "cat /etc/hosts.production >> /etc/hosts; nginx -t"
            - docker run --rm -t  ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:local /bin/bash -c "cat /etc/hosts.local >> /etc/hosts; nginx -t"
            - docker image rm ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:production || echo -e "${YELLOW}Image not present into this local registry${NC}"
            - docker image rm ${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:local || echo -e "${YELLOW}Image not present into this local registry${NC}"
          services:
            - docker
